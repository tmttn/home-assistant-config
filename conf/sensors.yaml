---
- platform: template
  sensors:
    desk_lamp_watts:
      value_template: >
        {{ state_attr("switch.desk_lamp", "current_power_w") | replace(" W", "") | float("Unavailable") }}
      unit_of_measurement: 'Watt'

    desk_lamp_current:
      friendly_name: "Lamp stroom"
      icon_template: >-
        {% set P = states("sensor.desk_lamp_watts") %}
        {% if P == "Unavailable"  %}
          mdi:cloud-question
        {% elif P | float > 3  %}
          mdi:power-plug
        {% else %}
          mdi:power-plug-off
        {% endif %}
      value_template: >-
        {% set P = states("sensor.desk_lamp_watts") %}
        {% if P == "Unavailable"  %}
          unavailable
        {% elif P | float > 3  %}
          on
        {% else %}
          off
        {% endif %}

    count_automations:
      entity_id: sensor.date
      value_template: "{{ states.automation | count }}"

    count_scripts:
      entity_id: sensor.date
      value_template: "{{ states.script| count }}"

    count_device_trackers:
      entity_id: sensor.date
      value_template: "{{ states.device_tracker | count }}"

    count_binary_sensors:
      entity_id: sensor.date
      value_template: "{{ states.binary_sensor| count }}"

    count_sensors:
      entity_id: sensor.date
      value_template: "{{ states.sensor | count }}"

    count_switches:
      entity_id: sensor.date
      value_template: "{{ states.switch | count }}"

    count_zones:
      entity_id: sensor.date
      value_template: "{{ states.zone | count }}"

    count_input_booleans:
      entity_id: sensor.date
      value_template: "{{ states.input_boolean | count }}"

    count_input_numbers:
      entity_id: sensor.date
      value_template: "{{ states.input_number | count }}"

    count_input_texts:
      entity_id: sensor.date
      value_template: "{{ states.input_text | count }}"

    count_input_selects:
      entity_id: sensor.date
      value_template: "{{ states.input_select | count }}"

    count_input_datetimes:
      entity_id: sensor.date
      value_template: "{{ states.input_datetime | count }}"

    ha_uptime:
      friendly_name: HA Uptime
      value_template: >
        {% if states('sensor.uptime') == '0.0' %}
          Just restarted...
        {% else %}
          {% macro phrase(value, name) %}
          {%- set value = value | int %}
          {%- set end = 's' if value > 1 else '' %}
          {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
          {%- endmacro %}

          {% set weeks = (states('sensor.uptime') | int / 7) | int %}
          {% set days = (states('sensor.uptime') | int) - (weeks * 7) %}
          {% set hours = (states('sensor.uptime') | float - states('sensor.uptime') | int) * 24 %}
          {% set minutes = (hours - hours | int) * 60 %}

          {{ [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') }}
        {% endif %}

    rpi_uptime:
      friendly_name: RPi Uptime
      entity_id: sensor.time
      value_template: >
        {% set up_time = as_timestamp(now()) - as_timestamp(states('sensor.last_boot')) %}

        {% set minutes = (up_time // 60) | int %}
        {% set hours = (minutes // 60) %}
        {% set days = (hours // 24) %}
        {% set weeks = (days // 7) %}

        {% set minutes = (minutes % 60) %}
        {% set hours =  (hours % 24) %}
        {% set days = (days % 7) %}

        {% macro phrase(value, name) %}
                  {%- set value = value %}
                  {%- set end = 's' if value > 1 else '' %}
                  {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
        {%- endmacro %}

        {% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') %}
        {% set last_comma = text.rfind(',') %}
        {% if last_comma != -1 %}
          {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
        {% endif %}

        {{ text }}

- platform: command_line
  name: "RPi CPU Temperature"
  command: "cat /sys/class/thermal/thermal_zone0/temp"
  unit_of_measurement: "°C"
  value_template: '{{ value | multiply(0.001) | round(2) }}'

- platform: command_line
  name: "RPi GPU Temperature"
  command: "/opt/vc/bin/vcgencmd measure_temp"
  unit_of_measurement: "°C"
  value_template: '{{ value | replace("temp=", "") | replace("''C", "") }}'

- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: "/"
    - type: memory_use_percent
    - type: network_in
      arg: eth0
    - type: network_out
      arg: eth0
    - type: processor_use
    - type: last_boot

- platform: dnsip

- platform: time_date

- platform: version
  name: Installed Version
  source: local

- platform: version
  name: Latest Available Version
  beta: false
  image: raspberrypi3
  source: hassio

- platform: rpi_power
  text_state: True

- platform: uptime

- platform: filesize
  file_paths:
    - /config/home-assistant_v2.db
